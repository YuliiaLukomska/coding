// Задачки та кахут по блендеду (модуль 3 та 4)

const numbers = [1, 4, 6];
numbers.length = 0; // цією операцією ми очищуємо масив, робимо його порожнім
console.log(numbers[0]); // undefined

const a = [10];
const b = a;
a[0] = 21;
console.log(a === b); // true. Бо масиви передаються і зберіга.ться за посиланням. Виходить, що  в констатнту b ми записати посилання на  масив а.
// Тобто a і b містять посилання на один і той же масив і відповідно, якщо ми вносимо зміни в масив, то ці зміни відображаються в обох константах.

let k = 10;
let c = k;
k = 21;
console.log(k === c); // false. Число-це простий тип даних. Прості типи даних зберігаються за значенням. Тому в змінну c в нас просто запишеться
// число 10 (значення змінної k). Про подальшу долю змінної k змінна c нічого знати не буде. Вони взагалі нічого один про одного більше не знають.

// Що повертає метод push()?

const pets = ['cat', 'rabbit'];
console.log(pets.push('parrot')); // 3

// Метод push() повертає оновлену(після пуша) довжину масива.

// Метод splice() мутує масив? Так. За доп цього методи ми можемо видаляти або додавати елементи до масиву мутуючи його.

const colors = ['grey', 'yellow', 'black'];
console.log(colors.splice(1, 0, 'red')); // додаємо колір ред другий елементом масиву. В цьому випадку метод splice() повертає []
console.log(colors); // ['grey', 'red', 'yellow', 'black'];
console.log(colors.splice(0, 1)); // видаляємо 1 елемент з індексом 0. Метод повертає масив з видаленими елементами -> ['grey']
console.log(colors); // ['red', 'yellow', 'black']

// Питання: якщо метод splice() не видаляє якісь елементи масиву, що він повертає. Н-д, якщо ви вказали не існуючий індекс, або не видаляєте,
// а додаєте новий елемент до масиву.
console.log(colors.splice(10, 0)); // повертає []

// Метод splice() повертає два випадки: або масив видалених елементів - якщо щось видалив. Або пустий масив, якщо нічого не видалив.

// Що повертає метод concat()?

console.log(pets.concat(colors)); // новий об'єднаний масив ['cat', 'rabbit', 'red', 'yellow', 'black']

// Що повертає метод slice()?

const flowers = ['sunflower', 'rose', 'lavanda'];
console.log(flowers.slice(0, 2)); // повертає новий масив, що містить копію елементів початкового масиву ['sunflower', 'rose']

// Що повертає метод pop() якщо масив порожній?

const cities = ['Odessa', 'Kyiv', 'Lviv'];
console.log(cities.pop()); // повернув елемент, який видалив з масиву (останній елемент маисву) -> 'Lviv'
console.log(cities); // ['Odessa', 'Kyiv']

const emptyArr = [];
console.log(emptyArr.pop()); // undefined

// Якщо після return нічого нема і функція викликається, то повернеться undefined

// Специфічний приклад

const q = {};
const w = {};

const e = {
  a: 10,
  b: 20,
};

e[q] = 30; // тут ключем об'єкту e стає пустий об'єкт, а значенням ключа стає 30
e[w] = 40; // тут знову ключем об'єкту стає пустий об'єкт, але ключі в одному об'єкті мають бути унікальними,тому попередній ключ-об'єкт перезаписується
//  і отримує значення 40.

console.log(e); //  {a: 10, b: 20, [object Object]: 40}

// ---------------------------------------------------Задачки, які треба періодично вирішувати для повторення----------------------------------------------------------
/*
Використовуючи ф-ю if...else, напишіть код, який запитуватиме: "Яка офіційна назва JavaScript?"
Якщо користувач вводить "ECMAScript", то показити через alert: "Вірно!".
Інакше відобразити: "Не знаєте? ECMAScript!"

Алгоритм:
1. Створити функцію
2. Написати умову
3. Викликати функцію вказавши як параметр prompt() - запит, який з'явиться на сайті. Відповідь, яку ти напишеш і буде змінною answer.

*/

/* якщо на prompt() натиснем cancel(відміна), то у answer запишеться null і тоді буде помилка, бо null.toLowerCase... не зможе виконатись.
Тому треба виключити такий випадок і просто вийти з функції якщо користувач натисне cancel:
  if (answer === null) {
  return; }
або додати додаткову умову перевірки (answer !== null).
toLowerCase() і trim() використовуємо щоб нормалізувати відповідь користувача - привести до одного реєстру та обрізати пробіли по боках. */

// function checkAnswer(answer) {
//   if (answer !== null && answer.toLowerCase().trim() === 'ecmascript') {
//     alert('Вірно!');
//   } else {
//     alert('Не знаєте? ECMAScript!');
//   }
// }

// checkAnswer(prompt('Яка офіційна назва JavaScript?'));

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Напиши функцію, яка буде отримувати номер користувача (10 цифр) і повертатиме закодовані перші 6 цифр.
Н-д, якщо номер 0976590822, то ф-я має повертати ******0822.
Алгоритм:
1. Створення функції
2. Ф-я буде приймати як параметр те, що користувач напише в prompt().
3. Вихід з функції, якщо користувач натисне cancel.
4. Обробка відповіді користувача
5. Використання методу slice();
6. Використання методу padStart();
*/

// function markNumber(number) {
//   // console.log(typeof number); // string

//   if (number === null) {
//     return;
//   } else if (number.trim().length < 10 || number.trim().length > 10) {
//     alert('Number length should consist of 10 numbers');
//   } else {
//     const trimNumber = number.slice(-4); // якщо вказуємо від'ємне число, то рахуємо з кінця починаючи з -1 і обрізаємо спереді (див приклад нижче)
//     const markedNumber = trimNumber.padStart(number.length, '*');
//     return markedNumber;
//   }
// }

// console.log(markNumber(prompt('Please, enter your number here')));

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// const cardNumber = '12345678910';
// const trimCardNumber = cardNumber.slice(-1);
// const trimCardNumberNew = cardNumber.slice(-5);
// console.log(trimCardNumber); // 0
// console.log(trimCardNumberNew); // 78910
//-------------------------------------------------------------------------------------------------------------------------------------------------------

/**
Напишіть програму, яка отримає від користувача число (кількість хвилин)та виведе в консоль рядок в форматі годин та хвилин.
Н-д: 70 === '01:10'. Викор метод padStart().
Алгоритм:
1. Ми отримуємо хвилини, ділимо ці хвилини на 60, щоб отримати к-ть годин і округлюємо до цілого числа. Далі додаємо спереді 0, якщо к-ть годин буде мати один символ.
2. Щоб отримати к-ть хвилин викор остачу від ділення, перетворюємо її в рядок і додаємо в кінці 0, якщо к-ть хв буде число з одним символом. Щоб не було 01:1, а 01:01. 
3. Робимо шаблонний рядок. 
 */

// function timeTransformation(time) {
//   const hours = String(Math.floor(time / 60)).padStart(2, '0');

//   const minutes = String(time % 60).padStart(2, '0');

//   return `${hours}:${minutes}`;
// }

// const resultTimeTrasformation = timeTransformation(67);
// console.log(resultTimeTrasformation);

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Методи padStart(target length, 'symbol') і padEnd(target length, "symbol") - це методи рядків. Вони додають спереді або ззаді до рядка символи,
// які ти задає як другий параметр. Перший параметр це фінальна довжина твого рядка - на ньому буде базуватись те, ск символів додасться до рядка.

// -----------------------------------------------------------------------------------------------------------------------------------------------------
/*Напишіть цикл, який виводить у консоль всі парні числа від max до min за спаданням.
 */

// function evenNumber(min, max) {
//   for (let i = max; i >= min; i--) {
//     // парні
//     if (i % 2 === 0) {
//       console.log(i);
//     }

//     // непарні
//     // if (i % 2 !== 0) {
//     //   console.log(i);
//     // }
//   }
// }
// evenNumber(1, 19);

// -----------------------------------------------------------------------------------------------------------------------------------------------------

// ти отримуєш хвилини, н-д 4500 хвилин. Тобі треба вивести дні, години, хвилини. Н-д: 3 068 хв = 2 дні 3 години 8 хвилин

function timeCount(time) {
  const days = Math.floor(time / 60 / 24);
  console.log(days); // 2

  const restHours = Math.floor(time / 60 - days * 24);

  const restMinutes = (((time / 60 - days * 24) * 60) % 60).toFixed(0);

  console.log(`${days} days ${restHours} hours ${restMinutes} minutes`);
}

console.log(timeCount(3068));

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
